{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["factory","targetComponent","targetName","_Component","_class","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","children","props","react_default","a","createElement","react","concat","type","name","displayName","Component","ClassComponent","FunctionalComponent","IsMyChildClassComponent","IsMyChildFunctionalComponent","App","className","src","logo","alt","App_ClassComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAIMA,SAAU,SAACC,EAAiBC,GAChC,gBAAAC,GAAA,SAAAC,IAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAD,GAAAM,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAD,EAAAD,GAAAE,OAAAQ,EAAA,EAAAR,CAAAD,EAAA,EAAAU,IAAA,SAAAC,MAAA,WACW,IACAC,EAAYT,KAAKU,MAAjBD,SACP,OACEE,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,gCAAAE,OAA2BpB,EAA3B,MAAAoB,OAA0CN,EAASO,OAAStB,IAC5DiB,EAAAC,EAAAC,cAAA,sCAAAE,OAAiCpB,EAAjC,OAAAoB,OAAiDN,EAASO,KAAKC,OAAStB,IACxEgB,EAAAC,EAAAC,cAAA,6CAAAE,OAAwCpB,EAAxC,OAAAoB,OAAwDN,EAASO,KAAKE,cAAgBvB,SAP9FE,EAAA,CAAqBsB,eAcjBC,wIAAuBD,aAC7BC,EAAeF,YAAc,iBAE7B,IAAMG,EAAsB,kBAAM,MAClCA,EAAoBH,YAAc,sBAElC,IAAMI,EAA0B7B,EAAQ2B,EAAgB,kBAClDG,EAA+B9B,EAAQ4B,EAAqB,uBAuBnDG,mLAnBX,OACEb,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAAA,UAAQY,UAAU,cAChBd,EAAAC,EAAAC,cAAA,OAAKa,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCjB,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACS,EAAD,KACEX,EAAAC,EAAAC,cAACgB,EAAD,OAEFlB,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAACQ,EAAD,gBAbMF,aChBEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.dd968619.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst factory = (targetComponent, targetName) => {\n  return class extends Component {\n    render() {\n      const {children} = this.props;\n      return (\n        <Fragment>\n          <div>{`children.type === ${targetName}: ${children.type === targetComponent}`}</div>\n          <div>{`children.type.name === '${targetName}': ${children.type.name === targetName}`}</div>\n          <div>{`children.type.displayName === '${targetName}': ${children.type.displayName === targetName}`}</div>\n        </Fragment>\n      );\n    }\n  }\n}\n\nclass ClassComponent extends Component {}\nClassComponent.displayName = 'ClassComponent';\n\nconst FunctionalComponent = () => null;\nFunctionalComponent.displayName = 'FunctionalComponent';\n\nconst IsMyChildClassComponent = factory(ClassComponent, 'ClassComponent')\nconst IsMyChildFunctionalComponent = factory(FunctionalComponent, 'FunctionalComponent')\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div>ClassComponent</div>\n          <IsMyChildClassComponent>\n            <ClassComponent />\n          </IsMyChildClassComponent>\n          <div>------</div>\n          <div>FunctionalComponent</div>\n          <IsMyChildFunctionalComponent>\n            <FunctionalComponent />\n          </IsMyChildFunctionalComponent>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}